import numpy as np
import numbers

def extend(arr: np.ndarray, rows: int, cols: int, fill=None) -> np.ndarray:
    # Check if arr is 2D
    if arr.ndim != 2:
        raise ValueError(f"can only extend 2D arrays, not {arr.ndim}D")

    # Check if rows and cols are valid
    if rows < arr.shape[0]:
        raise ValueError("invalid rows")
    if cols < arr.shape[1]:
        raise ValueError("invalid cols")

    # Check if fill is a number
    if fill is not None and not isinstance(fill, numbers.Number):
        raise ValueError("invalid fill")

    # Create a new empty array with the desired shape
    extended_arr = np.empty((rows, cols), dtype=arr.dtype)

    # Copy elements from the original array
    extended_arr[:arr.shape[0], :arr.shape[1]] = arr

    # Fill the new elements based on the specified rules
    if fill is None:
        # Fill with means
        row_means = np.mean(arr, axis=1)
        col_means = np.mean(arr, axis=0)
        overall_mean = np.mean(arr)
        extended_arr[arr.shape[0]:, :arr.shape[1]] = row_means[:, np.newaxis]
        extended_arr[:arr.shape[0], arr.shape[1]:] = col_means
        extended_arr[arr.shape[0]:, arr.shape[1]:] = overall_mean
    else:
        # Fill with the specified value
        extended_arr[arr.shape[0]:, :arr.shape[1]] = fill
        extended_arr[:arr.shape[0], arr.shape[1]:] = fill
        extended_arr[arr.shape[0]:, arr.shape[1]:] = fill

    return extended_arr

# Example usage:
arr = np.array([[1, 3], [1, 1]])
extended_array = extend(arr, rows=1, cols=4, fill=1)
print(extended_array)
